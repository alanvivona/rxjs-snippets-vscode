{
	
	"rxjs.Observable.from.map.filter": {
		"prefix": "obs.from",
		"description": "from(ish: ObservableInput<T>, scheduler: Scheduler): Observable<T>\nCreates an Observable from an Array, an array-like object, a Promise, an iterable object, or an Observable-like object.",
		"body": [
			"Observable.from(${1:object})",
			".map(v => ${2:v})",
			".filter(v => ${3:true})",
			".subscribe(",
			"\tv => { console.log( ${4:v}) },",
			"\te => { console.log( ${5:e} ) },",
			"\t() => { console.log('complete') }",
			");"
		]
	},
	"rxjs.Observable.of": {
		"prefix": "obs.of",
		"description": "of(values: ...T, scheduler: Scheduler): Observable<T>\nCreates an Observable that emits some values you specify as arguments, immediately one after the other, and then emits a complete notification.",
		"body": [
			"Observable.of(${1:object})",
			".map(v => ${2:v})",
			".filter(v => ${3:true})",
			".subscribe(",
			"\tv => { console.log(${4:v}) },",
			"\te => { console.log(${5:e}) },",
			"\t() => { console.log('complete') }",
			");"
		]
	},
	"rxjs.Observable.fromEvent": {
		"prefix": "obs.fromEvent",
		"description": "fromEvent(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T> \nCreates an Observable that emits events of a specific type coming from the given event target.",
		"body": [
			"Observable.fromEvent(${1:target},${2:eventName})",
			".map(v => ${3:v})",
			".filter(v => ${4:true})",
			".subscribe(",
			"\tv => { console.log(${5:v}) },",
			"\te => { console.log(${6:e}) },",
			"\t() => { console.log('complete') }",
			");"
		]
	},
	"rxjs.Observable.create": {
		"prefix": "obs.create",
		"description": "create(subscribe: function(subscriber: Subscriber): TeardownLogic): Observable\nCreates a new Observable that will execute the specified function when a Subscriber subscribes to it.",
		"body": [
			"Observable.create(subscriber => {",
			"\tsubscriber.next(${1:object});",
			"\tsubscriber.complete();",
			"})",
			".map(v => ${2:v})",
			".filter(v => ${3:true})",
			".subscribe(",
			"\tv => { console.log(${4:v}) },",
			"\te => { console.log(${5:e}) },",
			"\t() => { console.log('complete') }",
			");"
		]
	}
}