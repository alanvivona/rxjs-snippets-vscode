{
	"rxjs.Observable.from.map.filter": {
		"prefix": "Rx.Observable.from",
		"description": "Creates an Observable from an Array, an array-like object, a Promise, an iterable object, or an Observable-like object.",
		"body": [
			"Observable.from(${1:object})",
			".map(v => ${2:v})",
			".filter(v => ${3:true})",
			".subscribe(",
			"\tv => { console.log( ${4:v}) },",
			"\te => { console.log( ${5:e} ) },",
			"\t() => { console.log('complete') }",
			");"
		]
	},
	"rxjs.Observable.of": {
		"prefix": "Rx.Observable.of",
		"description": "Creates an Observable that emits some values you specify as arguments, immediately one after the other, and then emits a complete notification.",
		"body": [
			"Observable.of(${1:object})",
			".map(v => ${2:v})",
			".filter(v => ${3:true})",
			".subscribe(",
			"\tv => { console.log(${4:v}) },",
			"\te => { console.log(${5:e}) },",
			"\t() => { console.log('complete') }",
			");"
		]
	},
	"rxjs.Observable.fromEvent": {
		"prefix": "Rx.Observable.fromEvent",
		"description": "Creates a new Observable that will execute the specified function when a Subscriber subscribes to it.",
		"body": [
			"Observable.fromEvent(${1:target},${2:eventName})",
			".map(v => ${3:v})",
			".filter(v => ${4:true})",
			".subscribe(",
			"\tv => { console.log(${5:v}) },",
			"\te => { console.log(${6:e}) },",
			"\t() => { console.log('complete') }",
			");"
		]
	},
	"rxjs.Observable.fromEventPattern": {
		"prefix": "Rx.Observable.fromEventPattern",
		"description": "Creates a new Observable linked to a custom event using event handlers.",
		"body": [
			"Observable.fromEventPattern(${1:addHandlerFn},${2:delHandlerFn})",
			".map(v => ${3:v})",
			".filter(v => ${4:true})",
			".subscribe(",
			"\tv => { console.log(${5:v}) },",
			"\te => { console.log(${6:e}) },",
			"\t() => { console.log('complete') }",
			");"
		]
	},
	"rxjs.Observable.fromCallback": {
		"prefix": "Rx.Observable.fromCallback",
		"description": "Creates a new Observable from a callback function.",
		"body": [
			"Observable.fromCallback(${1:callbackFn})",
			".map(v => ${3:v})",
			".filter(v => ${4:true})",
			".subscribe(",
			"\tv => { console.log(${5:v}) },",
			"\te => { console.log(${6:e}) },",
			"\t() => { console.log('complete') }",
			");"
		]
	},
	"rxjs.Observable.fromNodeCallback": {
		"prefix": "Rx.Observable.fromNodeCallback",
		"description": "Creates a new Observable from a node callback function.",
		"body": [
			"Observable.fromNodeCallback(${1:nodeCallbackFn})",
			".map(v => ${3:v})",
			".filter(v => ${4:true})",
			".subscribe(",
			"\tv => { console.log(${5:v}) },",
			"\te => { console.log(${6:e}) },",
			"\t() => { console.log('complete') }",
			");"
		]
	},
	"rxjs.Observable.prototype.toCallback": {
		"prefix": "Rx.Observable.prototype.toCallback",
		"description": "Implements a function to convert observables to callbacks.",
		"body": [
			"Rx.Observable.prototype.toCallback = function (cb) {",
			"\tvar source = this",
			"\treturn function () {",
			"\t\tlet val, hasVal = false",
			"\t\tsource.subscribe(",
			"\t\t\tv => {",
			"\t\t\t\thasVal = true",
			"\t\t\t\tval = v",
			"\t\t\t\tconsole.log(${5:v})",
			"\t\t\t},",
			"\t\t\te => { console.log(${6:e}) },",
			"\t\t\t() => { console.log('complete') }",
			"\t\t)",
			"\t}",
			"}"
		]
	},
	"rxjs.Observable.create": {
		"prefix": "Rx.Observable.create",
		"description": "create(subscribe: function(subscriber: Subscriber): TeardownLogic): Observable\nCreates a new Observable that will execute the specified function when a Subscriber subscribes to it.",
		"body": [
			"Observable.create(subscriber => {",
			"\tsubscriber.next(${1:object});",
			"\tsubscriber.complete();",
			"})",
			".map(v => ${2:v})",
			".filter(v => ${3:true})",
			".subscribe(",
			"\tv => { console.log(${4:v}) },",
			"\te => { console.log(${5:e}) },",
			"\t() => { console.log('complete') }",
			");"
		]
	},
	"rxjs.Observable.empty": {
		"prefix": "Rx.Observable.empty",
		"description":"Creates an Observable that emits no items to the Observer and immediately emits a complete notification.",
		"body": [
			"Rx.Observable.empty().subscribe(",
			"\tnull,",
			"\tnull,",
			"\t() => { console.log('Completed') }",
			");"
  	]
	},
	"rxjs.Observable.fromPromise": {
		"prefix": "Rx.Observable.fromPromise",
		"description":"Converts a Promises to an Observable sequence.",
		"body": [
			"Rx.Observable.fromPromise(fetch('someURI')).subscribe(",
			"\t(resolve) => {",
			"\t\tconsole.log('Resolve:',resolve)",
			"\t}, ",
			"\t(reject) => {",
			"\t\tconsole.log('Reject:',reject)",
			"\t},",
			"\t() => {",
			"\t\tconsole.log('Completed')",
			"\t}",
			");"	
		]
	},
	"rxjs.Observable.interval": {
		"prefix": "Rx.Observable.interval",
		"description":"Returns an observable sequence that produces a value after each period.",
		"body": [
			"Rx.Observable.interval(period).subscribe(",
			"\tv => {",
			"\t\tconsole.log('Value', v)",
			"\t},",
			"\te => {",
			"\t\tconsole.log('Error', e)",
			"\t},",
			"\t() => {",
			"\t\tconsole.log('Completed')",
			"\t}",
			");"
		]
	},
	"rxjs.Observable.range": {
		"prefix": "Rx.Observable.range",
		"description":"Generates an observable sequence of integral numbers within a specified range.",
		"body": [
			"Rx.Observable.range(start, count).subscribe(",
			"\tv => {",
			"\t\tconsole.log('Value', v)",
			"\t},",
			"\te => {",
			"\t\tconsole.log('Error', e)",
			"\t},",
			"\t() => {",
			"\t\tconsole.log('Completed')",
			"\t}",
			");"
		]
	},
	"rxjs.Observable.timer": {
		"prefix": "Rx.Observable.timer",
		"description":"Returns an observable sequence that produces a value after dueTime has elapsed and then after each period.",
		"body": [
			"Rx.Observable.timer(dueTime, period).subscribe(",
			"\tv => {",
			"\t\tconsole.log('Value', v)",
			"\t},",
			"\te => {",
			"\t\tconsole.log('Error', e)",
			"\t},",
			"\t() => {",
			"\t\tconsole.log('Completed')",
			"\t}",
			");"
		]
	}
}